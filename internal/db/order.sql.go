// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const CreateOrder = `-- name: CreateOrder :one
INSERT INTO orders (price, amount, side, order_type, asset, created_by)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateOrderParams struct {
	Price     float64       `json:"price"`
	Amount    int32         `json:"amount"`
	Side      OrderSideType `json:"side"`
	OrderType OrderType     `json:"order_type"`
	Asset     string        `json:"asset"`
	CreatedBy uuid.UUID     `json:"created_by"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, CreateOrder,
		arg.Price,
		arg.Amount,
		arg.Side,
		arg.OrderType,
		arg.Asset,
		arg.CreatedBy,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const GetAllOrders = `-- name: GetAllOrders :many
SELECT id, price, amount, side, order_type, asset, created_at, created_by, order_status FROM orders
ORDER BY created_at DESC
`

func (q *Queries) GetAllOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, GetAllOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Amount,
			&i.Side,
			&i.OrderType,
			&i.Asset,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetOrderById = `-- name: GetOrderById :one
SELECT id, price, amount, side, order_type, asset, created_at, created_by, order_status FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, GetOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Amount,
		&i.Side,
		&i.OrderType,
		&i.Asset,
		&i.CreatedAt,
		&i.CreatedBy,
		&i.OrderStatus,
	)
	return i, err
}

const GetOrdersByUser = `-- name: GetOrdersByUser :many
SELECT id, price, amount, side, order_type, asset, created_at, created_by, order_status FROM orders
WHERE created_by = $1
ORDER BY created_at DESC
`

func (q *Queries) GetOrdersByUser(ctx context.Context, createdBy uuid.UUID) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, GetOrdersByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Amount,
			&i.Side,
			&i.OrderType,
			&i.Asset,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetSubmittedOrders = `-- name: GetSubmittedOrders :many
SELECT id, price, amount, side, order_type, asset, created_at, created_by, order_status FROM orders
WHERE order_status = 'SUBMITTED' OR order_status = 'PARTIALLY_FILLED'
ORDER BY created_at DESC
`

func (q *Queries) GetSubmittedOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, GetSubmittedOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Amount,
			&i.Side,
			&i.OrderType,
			&i.Asset,
			&i.CreatedAt,
			&i.CreatedBy,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET order_status = $1
WHERE id = $2
RETURNING id
`

type UpdateOrderStatusParams struct {
	OrderStatus OrderStatusType `json:"order_status"`
	ID          uuid.UUID       `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, UpdateOrderStatus, arg.OrderStatus, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}
