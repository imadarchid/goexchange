// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type OrderSideType string

const (
	OrderSideTypeBUY  OrderSideType = "BUY"
	OrderSideTypeSELL OrderSideType = "SELL"
)

func (e *OrderSideType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderSideType(s)
	case string:
		*e = OrderSideType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderSideType: %T", src)
	}
	return nil
}

type NullOrderSideType struct {
	OrderSideType OrderSideType `json:"order_side_type"`
	Valid         bool          `json:"valid"` // Valid is true if OrderSideType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderSideType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderSideType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderSideType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderSideType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderSideType), nil
}

type OrderStatusType string

const (
	OrderStatusTypePENDING         OrderStatusType = "PENDING"
	OrderStatusTypeSUBMITTED       OrderStatusType = "SUBMITTED"
	OrderStatusTypeCANCELED        OrderStatusType = "CANCELED"
	OrderStatusTypePARTIALLYFILLED OrderStatusType = "PARTIALLY_FILLED"
	OrderStatusTypeFILLED          OrderStatusType = "FILLED"
)

func (e *OrderStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatusType(s)
	case string:
		*e = OrderStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatusType: %T", src)
	}
	return nil
}

type NullOrderStatusType struct {
	OrderStatusType OrderStatusType `json:"order_status_type"`
	Valid           bool            `json:"valid"` // Valid is true if OrderStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatusType), nil
}

type OrderType string

const (
	OrderTypeMARKET OrderType = "MARKET"
	OrderTypeLIMIT  OrderType = "LIMIT"
)

func (e *OrderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderType(s)
	case string:
		*e = OrderType(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderType: %T", src)
	}
	return nil
}

type NullOrderType struct {
	OrderType OrderType `json:"order_type"`
	Valid     bool      `json:"valid"` // Valid is true if OrderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderType) Scan(value interface{}) error {
	if value == nil {
		ns.OrderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderType), nil
}

type Asset struct {
	ID         int32  `json:"id"`
	Ticker     string `json:"ticker"`
	AssetName  string `json:"asset_name"`
	IsTradable bool   `json:"is_tradable"`
}

type Order struct {
	ID          uuid.UUID       `json:"id"`
	Price       float64         `json:"price"`
	Amount      int32           `json:"amount"`
	Side        OrderSideType   `json:"side"`
	OrderType   OrderType       `json:"order_type"`
	Asset       string          `json:"asset"`
	CreatedAt   time.Time       `json:"created_at"`
	CreatedBy   uuid.UUID       `json:"created_by"`
	OrderStatus OrderStatusType `json:"order_status"`
}

type Transaction struct {
	ID          uuid.UUID `json:"id"`
	Price       float64   `json:"price"`
	Amount      int32     `json:"amount"`
	BuyerOrder  uuid.UUID `json:"buyer_order"`
	SellerOrder uuid.UUID `json:"seller_order"`
	Asset       string    `json:"asset"`
	CreatedAt   time.Time `json:"created_at"`
}

type User struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	Email     string    `json:"email"`
	Dob       time.Time `json:"dob"`
	Balance   float64   `json:"balance"`
	CreatedAt time.Time `json:"created_at"`
}
