// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transaction.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const CreateTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (price, amount, buyer_order, seller_order, asset, created_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id
`

type CreateTransactionParams struct {
	Price       float64   `json:"price"`
	Amount      int32     `json:"amount"`
	BuyerOrder  uuid.UUID `json:"buyer_order"`
	SellerOrder uuid.UUID `json:"seller_order"`
	Asset       string    `json:"asset"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, CreateTransaction,
		arg.Price,
		arg.Amount,
		arg.BuyerOrder,
		arg.SellerOrder,
		arg.Asset,
		arg.CreatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const GetAllTransactions = `-- name: GetAllTransactions :many
SELECT id, price, amount, buyer_order, seller_order, asset, created_at FROM transactions
ORDER BY created_at DESC
`

func (q *Queries) GetAllTransactions(ctx context.Context) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, GetAllTransactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Amount,
			&i.BuyerOrder,
			&i.SellerOrder,
			&i.Asset,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetTransactionById = `-- name: GetTransactionById :one
SELECT id, price, amount, buyer_order, seller_order, asset, created_at FROM transactions
WHERE id = $1
`

func (q *Queries) GetTransactionById(ctx context.Context, id uuid.UUID) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, GetTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.Price,
		&i.Amount,
		&i.BuyerOrder,
		&i.SellerOrder,
		&i.Asset,
		&i.CreatedAt,
	)
	return i, err
}

const GetTransactionsByUser = `-- name: GetTransactionsByUser :many
SELECT transactions.id, transactions.price, transactions.amount, buyer_order, seller_order, transactions.asset, transactions.created_at, orders.id, orders.price, orders.amount, side, order_type, orders.asset, orders.created_at, created_by, order_status FROM transactions
JOIN orders ON transactions.buyer_order = orders.id OR transactions.seller_order = orders.id
WHERE orders.created_by = $1
ORDER BY orders.created_at DESC
`

type GetTransactionsByUserRow struct {
	ID          uuid.UUID       `json:"id"`
	Price       float64         `json:"price"`
	Amount      int32           `json:"amount"`
	BuyerOrder  uuid.UUID       `json:"buyer_order"`
	SellerOrder uuid.UUID       `json:"seller_order"`
	Asset       string          `json:"asset"`
	CreatedAt   time.Time       `json:"created_at"`
	ID_2        uuid.UUID       `json:"id_2"`
	Price_2     float64         `json:"price_2"`
	Amount_2    int32           `json:"amount_2"`
	Side        OrderSideType   `json:"side"`
	OrderType   OrderType       `json:"order_type"`
	Asset_2     string          `json:"asset_2"`
	CreatedAt_2 time.Time       `json:"created_at_2"`
	CreatedBy   uuid.UUID       `json:"created_by"`
	OrderStatus OrderStatusType `json:"order_status"`
}

func (q *Queries) GetTransactionsByUser(ctx context.Context, createdBy uuid.UUID) ([]GetTransactionsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, GetTransactionsByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransactionsByUserRow{}
	for rows.Next() {
		var i GetTransactionsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Price,
			&i.Amount,
			&i.BuyerOrder,
			&i.SellerOrder,
			&i.Asset,
			&i.CreatedAt,
			&i.ID_2,
			&i.Price_2,
			&i.Amount_2,
			&i.Side,
			&i.OrderType,
			&i.Asset_2,
			&i.CreatedAt_2,
			&i.CreatedBy,
			&i.OrderStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
